-- Migration: Autonomous Reply Agent System
-- Phase 1: Mailbox Agent Assignment & Reply Jobs Infrastructure
-- Author: AI Assistant
-- Date: 2025-01-10

-- ============================================================================
-- Part 1: Add agent assignment to email accounts
-- ============================================================================

-- Add assigned_agent_id column to email_accounts
ALTER TABLE email_accounts
ADD COLUMN IF NOT EXISTS assigned_agent_id UUID REFERENCES outreach_agents(id) ON DELETE SET NULL;

-- Create index for efficient agent-mailbox lookups
CREATE INDEX IF NOT EXISTS idx_email_accounts_assigned_agent
ON email_accounts(assigned_agent_id)
WHERE assigned_agent_id IS NOT NULL;

-- Add comment for documentation
COMMENT ON COLUMN email_accounts.assigned_agent_id IS 'Outreach agent assigned to handle replies for this mailbox. NULL = manual mode.';

-- ============================================================================
-- Part 2: Create reply_jobs table for scheduled autonomous replies
-- ============================================================================

CREATE TABLE IF NOT EXISTS reply_jobs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,

  -- References
  agent_id UUID NOT NULL REFERENCES outreach_agents(id) ON DELETE CASCADE,
  email_account_id UUID NOT NULL REFERENCES email_accounts(id) ON DELETE CASCADE,
  thread_id VARCHAR(255) NOT NULL,
  incoming_email_id UUID REFERENCES incoming_emails(id) ON DELETE SET NULL,
  contact_id UUID REFERENCES contacts(id) ON DELETE SET NULL,
  message_ref VARCHAR(255), -- In-Reply-To header for threading

  -- Draft content
  draft_subject TEXT NOT NULL,
  draft_body TEXT NOT NULL,
  rationale TEXT, -- AI explanation for this reply

  -- Scheduling
  proposed_send_at TIMESTAMP WITH TIME ZONE, -- AI-suggested time
  scheduled_at TIMESTAMP WITH TIME ZONE NOT NULL, -- Actual scheduled time
  editable_until TIMESTAMP WITH TIME ZONE, -- Lock edits 2 min before send
  sent_at TIMESTAMP WITH TIME ZONE, -- When actually sent

  -- Status & Risk
  status VARCHAR(20) NOT NULL DEFAULT 'scheduled'
    CHECK (status IN ('scheduled', 'needs_approval', 'approved', 'sending', 'sent', 'failed', 'cancelled')),
  risk_score NUMERIC(3,2) CHECK (risk_score >= 0 AND risk_score <= 1),
  risk_flags JSONB DEFAULT '[]',
  confidence_score NUMERIC(3,2) CHECK (confidence_score >= 0 AND confidence_score <= 1),

  -- Metadata
  last_editor_id UUID REFERENCES users(id),
  audit_log JSONB DEFAULT '[]', -- Track all edits/approvals
  error_message TEXT,
  retry_count INT DEFAULT 0,

  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for efficient queries
CREATE INDEX IF NOT EXISTS idx_reply_jobs_user_id ON reply_jobs(user_id);
CREATE INDEX IF NOT EXISTS idx_reply_jobs_agent_id ON reply_jobs(agent_id);
CREATE INDEX IF NOT EXISTS idx_reply_jobs_email_account ON reply_jobs(email_account_id);
CREATE INDEX IF NOT EXISTS idx_reply_jobs_contact_id ON reply_jobs(contact_id);
CREATE INDEX IF NOT EXISTS idx_reply_jobs_status ON reply_jobs(status);
CREATE INDEX IF NOT EXISTS idx_reply_jobs_scheduled ON reply_jobs(scheduled_at) WHERE status IN ('scheduled', 'approved');
CREATE INDEX IF NOT EXISTS idx_reply_jobs_thread ON reply_jobs(thread_id);

-- Comments for documentation
COMMENT ON TABLE reply_jobs IS 'Scheduled autonomous email replies generated by outreach agents';
COMMENT ON COLUMN reply_jobs.status IS 'scheduled = queued, needs_approval = high risk, approved = manually approved, sending = in progress, sent = delivered, failed = error, cancelled = user cancelled';
COMMENT ON COLUMN reply_jobs.risk_score IS 'AI risk assessment 0.0-1.0. >0.6 requires approval';
COMMENT ON COLUMN reply_jobs.editable_until IS 'Timestamp after which edits are locked (typically scheduled_at - 2 minutes)';
COMMENT ON COLUMN reply_jobs.audit_log IS 'JSON array of all edits, approvals, and status changes';

-- ============================================================================
-- Part 3: Create agent_stats_hourly for learning optimal send times
-- ============================================================================

CREATE TABLE IF NOT EXISTS agent_stats_hourly (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  agent_id UUID NOT NULL REFERENCES outreach_agents(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,

  -- Time bucket
  hour_of_day INT NOT NULL CHECK (hour_of_day >= 0 AND hour_of_day <= 23),
  day_of_week INT NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6), -- 0 = Sunday
  timezone VARCHAR(50) NOT NULL DEFAULT 'UTC',

  -- Metrics
  sends INT DEFAULT 0,
  opens INT DEFAULT 0,
  clicks INT DEFAULT 0,
  replies INT DEFAULT 0,

  -- Calculated reward (opens + 3*replies)
  reward_score NUMERIC(8,2) DEFAULT 0,

  -- Metadata
  first_send_at TIMESTAMP WITH TIME ZONE,
  last_send_at TIMESTAMP WITH TIME ZONE,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

  UNIQUE(agent_id, hour_of_day, day_of_week, timezone)
);

-- Indexes for efficient lookups
CREATE INDEX IF NOT EXISTS idx_agent_stats_agent_id ON agent_stats_hourly(agent_id);
CREATE INDEX IF NOT EXISTS idx_agent_stats_hour ON agent_stats_hourly(hour_of_day, day_of_week);
CREATE INDEX IF NOT EXISTS idx_agent_stats_reward ON agent_stats_hourly(reward_score DESC);

-- Comments
COMMENT ON TABLE agent_stats_hourly IS 'Hourly send performance stats for learning optimal send times per agent';
COMMENT ON COLUMN agent_stats_hourly.reward_score IS 'Performance metric: opens + (3 * replies). Higher = better engagement';
COMMENT ON COLUMN agent_stats_hourly.hour_of_day IS '0-23 representing hour in specified timezone';
COMMENT ON COLUMN agent_stats_hourly.day_of_week IS '0=Sunday, 1=Monday, ..., 6=Saturday';

-- ============================================================================
-- Part 4: Row Level Security (RLS) Policies
-- ============================================================================

-- Enable RLS on reply_jobs
ALTER TABLE reply_jobs ENABLE ROW LEVEL SECURITY;

-- Policy: Users can only see their own reply jobs
CREATE POLICY IF NOT EXISTS reply_jobs_select_own
ON reply_jobs FOR SELECT
USING (auth.uid() = user_id);

-- Policy: Users can only insert their own reply jobs
CREATE POLICY IF NOT EXISTS reply_jobs_insert_own
ON reply_jobs FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Policy: Users can only update their own reply jobs
CREATE POLICY IF NOT EXISTS reply_jobs_update_own
ON reply_jobs FOR UPDATE
USING (auth.uid() = user_id);

-- Policy: Users can only delete their own reply jobs
CREATE POLICY IF NOT EXISTS reply_jobs_delete_own
ON reply_jobs FOR DELETE
USING (auth.uid() = user_id);

-- Enable RLS on agent_stats_hourly
ALTER TABLE agent_stats_hourly ENABLE ROW LEVEL SECURITY;

-- Policy: Users can only see their own agent stats
CREATE POLICY IF NOT EXISTS agent_stats_select_own
ON agent_stats_hourly FOR SELECT
USING (auth.uid() = user_id);

-- Policy: Users can only insert their own agent stats
CREATE POLICY IF NOT EXISTS agent_stats_insert_own
ON agent_stats_hourly FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Policy: Users can only update their own agent stats
CREATE POLICY IF NOT EXISTS agent_stats_update_own
ON agent_stats_hourly FOR UPDATE
USING (auth.uid() = user_id);

-- ============================================================================
-- Part 5: Trigger for updated_at timestamps
-- ============================================================================

-- Trigger function for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to reply_jobs
DROP TRIGGER IF EXISTS update_reply_jobs_updated_at ON reply_jobs;
CREATE TRIGGER update_reply_jobs_updated_at
BEFORE UPDATE ON reply_jobs
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Apply trigger to agent_stats_hourly
DROP TRIGGER IF EXISTS update_agent_stats_updated_at ON agent_stats_hourly;
CREATE TRIGGER update_agent_stats_updated_at
BEFORE UPDATE ON agent_stats_hourly
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- Part 6: Helper Functions
-- ============================================================================

-- Function to calculate editable_until timestamp (scheduled_at - 2 minutes)
CREATE OR REPLACE FUNCTION calculate_editable_until(scheduled_time TIMESTAMP WITH TIME ZONE)
RETURNS TIMESTAMP WITH TIME ZONE AS $$
BEGIN
  RETURN scheduled_time - INTERVAL '2 minutes';
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Function to update reward_score based on metrics
CREATE OR REPLACE FUNCTION update_agent_stats_reward()
RETURNS TRIGGER AS $$
BEGIN
  NEW.reward_score := NEW.opens + (3 * NEW.replies);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to auto-calculate reward_score
DROP TRIGGER IF EXISTS update_reward_score ON agent_stats_hourly;
CREATE TRIGGER update_reward_score
BEFORE INSERT OR UPDATE OF opens, replies ON agent_stats_hourly
FOR EACH ROW EXECUTE FUNCTION update_agent_stats_reward();

-- ============================================================================
-- Part 7: Sample Data & Verification
-- ============================================================================

-- Verify tables exist
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'reply_jobs') THEN
    RAISE EXCEPTION 'reply_jobs table was not created';
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'agent_stats_hourly') THEN
    RAISE EXCEPTION 'agent_stats_hourly table was not created';
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name = 'email_accounts'
    AND column_name = 'assigned_agent_id'
  ) THEN
    RAISE EXCEPTION 'assigned_agent_id column was not added to email_accounts';
  END IF;

  RAISE NOTICE 'Migration completed successfully! ✅';
  RAISE NOTICE 'Created tables: reply_jobs, agent_stats_hourly';
  RAISE NOTICE 'Added column: email_accounts.assigned_agent_id';
  RAISE NOTICE 'Applied RLS policies and triggers';
END $$;
